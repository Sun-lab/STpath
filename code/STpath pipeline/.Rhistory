}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
proposal_sigma <- c(1.5, 1.5)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
plot(NULL, type = "n", xlim = c(1, n_samples), ylim = range(sapply(chains, function(chain) chain[, 2])),
xlab = "Iteration", ylab = expression(theta[2]), main = expression(paste("Traceplot of ", theta[2])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 2], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
proposal_sigma <- c(1.6, 1.6)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
plot(NULL, type = "n", xlim = c(1, n_samples), ylim = range(sapply(chains, function(chain) chain[, 2])),
xlab = "Iteration", ylab = expression(theta[2]), main = expression(paste("Traceplot of ", theta[2])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 2], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
accept_rates
par(mfrow = c(1,1))
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
proposal_sigma <- c(1.5, 1.5)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
plot(NULL, type = "n", xlim = c(1, n_samples), ylim = range(sapply(chains, function(chain) chain[, 2])),
xlab = "Iteration", ylab = expression(theta[2]), main = expression(paste("Traceplot of ", theta[2])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 2], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
accept_rates
load("/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/deconvolution_new/CARD_alg_matrix_BC23268_C2_celltype_major.rds")
> load("/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/deconvolution_new/CARD_alg_matrix_BC23268_D1_celltype_major.rds")
load("/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/deconvolution_new/CARD_alg_matrix_BC23268_D1_celltype_major.rds")
# Load necessary libraries
library(ggplot2)
library(data.table)
library(MuSiC)
library(CARD)
library(stringr)
library(Matrix)
library(readr)
library(tidyverse)
library(biomaRt)
library(gprofiler2)
library(org.Hs.eg.db)
library(EnsDb.Hsapiens.v79)
library(dplyr)
library(grid)
sc_count <- readMM(file.path(sc_dir, "count_matrix_sparse.mtx"))
sc_dir <- "/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/Wu_2021/data/scRNASeq/"
st_dirs <- list(
He = "/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/He_2020/data/",
`10x` = "/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/10X/data/",
Wu = "/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/Wu_2021/data/",
Janesick = "/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/Janesick_2023/data/"
)
output_dirs <- list(
He = "../../output/He_2020/deconvolution/",
`10x` = "../../output/10X/deconvolution/",
Wu = "../../output/Wu_2021/deconvolution/",
Janesick = "../../output/Janesick_2023/deconvolution/"
)
# Predict expression from proportions -------------------------------------
# Wu et data
sc_count <- readMM(file.path(sc_dir, "count_matrix_sparse.mtx"))
sc_meta <- read.csv(file = file.path(sc_dir, "metadata.csv"))
rownames(sc_meta) <- sc_meta$X
sc_gene <- read.csv(file = file.path(sc_dir, "count_matrix_genes.tsv"), sep = "\t", header = FALSE)
colnames(sc_gene) <- "symbol.sc"
sc_barcode <- read.csv(file = file.path(sc_dir, "count_matrix_barcodes.tsv"), sep = "\t", header = FALSE)
colnames(sc_count) <- sc_barcode$V1
rownames(sc_count) <- sc_gene$symbol.sc
sc_count <- as(sc_count, "sparseMatrix")
sc_count <- as(sc_count, "CsparseMatrix")
avg_sc_ref <- list()
for (subtype in unique(sc_meta$subtype)) {
cells2use <- which(sc_meta$subtype == subtype)
sc_count_i <- sc_count[, cells2use]
sc_meta_i <- sc_meta[cells2use, ]
avg_expr_type <- matrix(nrow = nrow(sc_count_i),
ncol = length(unique(sc_meta_i$celltype_major)))
colnames(avg_expr_type) <- unique(sc_meta_i$celltype_major)
rownames(avg_expr_type) <- rownames(sc_count_i)
for (ct in unique(sc_meta_i$celltype_major)) {
cells <- sc_meta_i[sc_meta_i$celltype_major == ct,]$X
expr <- sc_count_i[, cells]
avg_expr_type[, ct] <- rowMeans(expr)
}
avg_sc_ref[[subtype]] <- avg_expr_type
}
st_meta <- st_meta_all$Wu
output_dir <- output_dirs$Wu
st_meta_all <- list()
spatial_all <- list()
###### Wu_2021
# Create metadata for the spatial transcriptomics data
st_dir <- st_dirs$Wu
metadata_files = list.files(file.path(st_dir, "metadata"), pattern="_metadata.csv")
metadata <- data.frame()
for(f1 in metadata_files){
d1 <- fread(file.path(st_dir, "metadata", f1))
metadata <- rbind(metadata, d1)
}
metadata$sid <- metadata$patientid
st_meta <- unique(metadata[, c("sid", "subtype")])
st_meta$subtype <- ifelse(st_meta$subtype %in% c("ER", "HER2"), paste0(st_meta$subtype, "+"), st_meta$subtype)
st_meta$count_matrix_dir <- paste0(st_dir, "filtered_count_matrices/", st_meta$sid, "_filtered_count_matrix/matrix.mtx.gz")
st_meta$feature_dir <- paste0(st_dir, "filtered_count_matrices/", st_meta$sid, "_filtered_count_matrix/features.tsv.gz")
st_meta$barcode_dir <- paste0(st_dir, "filtered_count_matrices/", st_meta$sid, "_filtered_count_matrix/barcodes.tsv.gz")
st_meta <- as.data.frame(st_meta)
# Create spatial location data
spatial_dir = paste0(st_dir, "spatial/", st_meta$sid, "_spatial/")
spatial <- data.frame()
for (i in 1:nrow(st_meta)) {
sp <- read.csv(file.path(st_dir, "spatial/", paste0(st_meta[i, "sid"], "_spatial/tissue_positions_list.csv")),
header = FALSE, sep = ',')
sp <- sp[c(1,3,4)]
colnames(sp)[2:3] <- c("x", "y")
sp$sid <- st_meta[i, "sid"]
sp$spot_id <- sp$V1
# sp$spot_id <- paste0(sp$sid, "_", sp$V1)
spatial <- rbind(spatial, sp)
}
st_meta_all[["Wu"]] <- st_meta
spatial_all[["Wu"]] <- spatial
st_meta <- st_meta_all$Wu
output_dir <- output_dirs$Wu
predicted_expr_list <- list()
i=1
# Retrieve the reference average expression matrix for the specific cell subtype
avg_type_ref <- avg_sc_ref[[st_meta[i, "subtype"]]]
# Get the sample ID for the current iteration
s1 <- st_meta[i, "sid"]
# Read the cell type proportion data for the current sample
prop <- read.csv(file.path(output_dir, sprintf("/Proportion_%s_celltype_major.csv", s1, cell_type_res)),
check.names = F)
# Read the cell type proportion data for the current sample
prop <- read.csv(file.path(output_dir, sprintf("/Proportion_%s_celltype_major.csv", s1)),
check.names = F)
file.path(output_dir, sprintf("/Proportion_%s_celltype_major.csv", s1))
setwd("~/GitHub/STpath/code/STpath pipeline")
# Read the cell type proportion data for the current sample
prop <- read.csv(file.path(output_dir, sprintf("/Proportion_%s_celltype_major.csv", s1)),
check.names = F)
# Set the first column as rownames and clean up the proportion data
colnames(prop)[1] <- "X"
prop <- prop %>%
column_to_rownames("X") %>%
dplyr::select(-sid) %>%
t()
# Calculate predicted gene expression using matrix multiplication
predicted_expr <- avg_type_ref %*% prop
# Store the predicted expression in a list
predicted_expr_list[[s1]] <- predicted_expr
# Read the spatial transcriptomics count matrix for the sample
stdata_s <- readMM(st_meta[i, "count_matrix_dir"])
# Handle missing column or row names for the count matrix
if(is.null(colnames(stdata_s)) || is.null(rownames(stdata_s))){
barcode <- read.table(file = gzfile(st_meta[i, "barcode_dir"]),
sep = '\t', header = FALSE)
feature <- read.table(file = gzfile(st_meta[i, "feature_dir"]),
sep = '\t', header = FALSE)
barcode_names <- barcode$V1
# feature_names <- feature$V1
feature_names <- feature[, sapply(feature, function(column) !("Gene Expression" %in% column) && !any(grepl("^ENSG", column)))]
# Assign to the dimension with same length.
if (ncol(stdata_s) == length(barcode_names) && nrow(stdata_s) == length(feature_names)) {
colnames(stdata_s) <- barcode_names
rownames(stdata_s) <- feature_names
} else if (nrow(stdata_s) == length(barcode_names) && ncol(stdata_s) == length(feature_names)) {
rownames(stdata_s) <- barcode_names
colnames(stdata_s) <- feature_names
} else {
cat("The lengths of the barcode or feature names do not match the dimensions of the matrix.\n")
}
}
# Convert the matrix to a sparse format for efficient computation
stdata_s <- as(stdata_s, "sparseMatrix")
stdata_s <- as(stdata_s, "CsparseMatrix")
# Extract the count matrix for columns (samples) matching the predicted expression matrix
st_count <- stdata_s[, colnames(predicted_expr)]
# Find common genes between the predicted and observed matrices
common_genes <- intersect(rownames(st_count), rownames(predicted_expr))
st_count <- st_count[common_genes,]
predicted_expr <- predicted_expr[common_genes, ]
# Function for sparse row-wise correlation
sparse_row_cor <- function(mat1, mat2) {
apply(mat1, 1, function(row, mat2) cor(row, mat2[row.names(mat1) == row.names(mat2), ], method = "pearson"), mat2 = mat2)
}
# Compute diagonal (sample-wise) correlations directly
column_wise_correlation <- sapply(seq_len(ncol(st_count)), function(i) {
cor(st_count[, i], predicted_expr[, i], method = "pearson")
})
column_wise_correlation
# Summary statistics
cat("Summary of sample-wise correlations:\n")
print(summary(column_wise_correlation))
# Visualize the correlations
hist(column_wise_correlation, main = "Sample-wise Correlation", xlab = "Correlation", breaks = 50)
# Function for sparse row-wise correlation
sparse_row_cor <- function(mat1, mat2) {
apply(mat1, 1, function(row, mat2) cor(row, mat2[row.names(mat1) == row.names(mat2), ], method = "pearson"), mat2 = mat2)
}
# Compute row-wise correlations
correlation_per_gene <- sparse_row_cor(st_count, predicted_expr)
# Compute sample-wise correlations directly
row_wise_correlation <- sapply(seq_len(nrow(st_count)), function(i) {
cor(st_count[i, ], predicted_expr[i, ], method = "pearson")
})
# Summary statistics
cat("Summary of gene-wise correlations:\n")
print(summary(row_wise_correlation))
sample_wise_cor <- list()
gene_wise_cor <- list()
names(column_wise_correlation) <- colnames(st_count)
names(row_wise_correlation) <- rownames(st_count)
st_meta <- st_meta_all$Wu
output_dir <- output_dirs$Wu
predicted_expr_list <- list()
sample_wise_cor <- list()
gene_wise_cor <- list()
for (i in 1:nrow(st_meta)) {
# Retrieve the reference average expression matrix for the specific cell subtype
avg_type_ref <- avg_sc_ref[[st_meta[i, "subtype"]]]
# Get the sample ID for the current iteration
s1 <- st_meta[i, "sid"]
# Read the cell type proportion data for the current sample
prop <- read.csv(file.path(output_dir, sprintf("/Proportion_%s_celltype_major.csv", s1)),
check.names = F)
# Set the first column as rownames and clean up the proportion data
colnames(prop)[1] <- "X"
prop <- prop %>%
column_to_rownames("X") %>%
dplyr::select(-sid) %>%
t()
# Calculate predicted gene expression using matrix multiplication
predicted_expr <- avg_type_ref %*% prop
# Store the predicted expression in a list
predicted_expr_list[[s1]] <- predicted_expr
# Read the spatial transcriptomics count matrix for the sample
stdata_s <- readMM(st_meta[i, "count_matrix_dir"])
# Handle missing column or row names for the count matrix
if(is.null(colnames(stdata_s)) || is.null(rownames(stdata_s))){
barcode <- read.table(file = gzfile(st_meta[i, "barcode_dir"]),
sep = '\t', header = FALSE)
feature <- read.table(file = gzfile(st_meta[i, "feature_dir"]),
sep = '\t', header = FALSE)
barcode_names <- barcode$V1
# feature_names <- feature$V1
feature_names <- feature[, sapply(feature, function(column) !("Gene Expression" %in% column) && !any(grepl("^ENSG", column)))]
# Assign to the dimension with same length.
if (ncol(stdata_s) == length(barcode_names) && nrow(stdata_s) == length(feature_names)) {
colnames(stdata_s) <- barcode_names
rownames(stdata_s) <- feature_names
} else if (nrow(stdata_s) == length(barcode_names) && ncol(stdata_s) == length(feature_names)) {
rownames(stdata_s) <- barcode_names
colnames(stdata_s) <- feature_names
} else {
cat("The lengths of the barcode or feature names do not match the dimensions of the matrix.\n")
}
}
# Convert the matrix to a sparse format for efficient computation
stdata_s <- as(stdata_s, "sparseMatrix")
stdata_s <- as(stdata_s, "CsparseMatrix")
# Extract the count matrix for columns (samples) matching the predicted expression matrix
st_count <- stdata_s[, colnames(predicted_expr)]
# Find common genes between the predicted and observed matrices
common_genes <- intersect(rownames(st_count), rownames(predicted_expr))
st_count <- st_count[common_genes,]
predicted_expr <- predicted_expr[common_genes, ]
# Compute sample-wise correlations directly
column_wise_correlation <- sapply(seq_len(ncol(st_count)), function(i) {
cor(st_count[, i], predicted_expr[, i], method = "pearson")
})
names(column_wise_correlation) <- colnames(st_count)
sample_wise_cor[[s1]] <- column_wise_correlation
# Compute gene-wise correlations directly
row_wise_correlation <- sapply(seq_len(nrow(st_count)), function(i) {
cor(st_count[i, ], predicted_expr[i, ], method = "pearson")
})
names(row_wise_correlation) <- rownames(st_count)
gene_wise_cor[[s1]] <- row_wise_correlation
}
setwd("~/GitHub/STpath/code/STpath pipeline")
save(gene_wise_cor, predicted_expr_list, sample_wise_cor, avg_sc_ref, file = "card_predict_expression.rda")
names(gene_wise_cor)
sapply(gene_wise_cor, summary)
sapply(sample_wise_cor, summary)
sample_wise_cor
sample_wise_cor
hist(sample_wise_cor, main = "Sample-wise Correlation",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$1142243F, main = "Sample-wise Correlation",
hist(sample_wise_cor$`1142243F`, main = "Sample-wise Correlation",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$`1142243F`, main = "Sample-wise Correlation for 1142243F",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$`1160920F`, main = "Sample-wise Correlation for 1160920F",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$CID4290, main = "Sample-wise Correlation for CID4290",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$CID4465, main = "Sample-wise Correlation for CID4465",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$CID44971, main = "Sample-wise Correlation for CID44971",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$CID4535, main = "Sample-wise Correlation for CID4535",
xlab = "Correlation", breaks = 100)
hist(sample_wise_cor$`1142243F`, main = "Sample-wise Correlation for 1142243F",
xlab = "Correlation", breaks = 100, xlim = c(0,1))
par(mfrow = c(2,3))
hist(sample_wise_cor$`1142243F`, main = "Sample-wise Correlation for 1142243F",
xlab = "Correlation", breaks = 100, xlim = c(0,1))
hist(sample_wise_cor$`1160920F`, main = "Sample-wise Correlation for 1160920F",
xlab = "Correlation", breaks = 100, xlim = c(0,1))
hist(sample_wise_cor$CID4290, main = "Sample-wise Correlation for CID4290",
xlab = "Correlation", breaks = 100, xlim = c(0,1))
hist(sample_wise_cor$CID4465, main = "Sample-wise Correlation for CID4465",
xlab = "Correlation", breaks = 100, xlim = c(0,1))
hist(sample_wise_cor$CID44971, main = "Sample-wise Correlation for CID44971",
xlab = "Correlation", breaks = 100, xlim = c(0,1))
hist(sample_wise_cor$CID4535, main = "Sample-wise Correlation for CID4535",
xlab = "Correlation", breaks = 100, xlim = c(0,1))
hist(sample_wise_cor$`1142243F`, main = "Sample-wise Correlation for 1142243F",
xlab = "Correlation", xlim = c(0,1))
?hist
hist(sample_wise_cor$`1142243F`, main = "Sample-wise Correlation for 1142243F",
xlab = "Correlation",  breaks = 30, xlim = c(0,1))
par(mfrow = c(2,3))
hist(sample_wise_cor$`1142243F`, main = "Sample-wise Correlation for 1142243F",
xlab = "Correlation",  breaks = 30, xlim = c(0,1))
hist(sample_wise_cor$`1160920F`, main = "Sample-wise Correlation for 1160920F",
xlab = "Correlation", breaks = 30, xlim = c(0,1))
hist(sample_wise_cor$CID4290, main = "Sample-wise Correlation for CID4290",
xlab = "Correlation", breaks = 30, xlim = c(0,1))
hist(sample_wise_cor$CID4465, main = "Sample-wise Correlation for CID4465",
xlab = "Correlation", breaks = 30, xlim = c(0,1))
hist(sample_wise_cor$CID44971, main = "Sample-wise Correlation for CID44971",
xlab = "Correlation", breaks = 30, xlim = c(0,1))
hist(sample_wise_cor$CID4535, main = "Sample-wise Correlation for CID4535",
xlab = "Correlation", breaks = 30, xlim = c(0,1))
sort(sample_wise_cor$`1142243F`)
sort(sample_wise_cor$`1142243F`, decreasing = T)
sort(sample_wise_cor$`1142243F`, decreasing = T)[1]
names(sort(sample_wise_cor$`1142243F`, decreasing = T)[1])
predicted_expr_list$`1142243F`
s1 <- names(sort(sample_wise_cor$`1142243F`, decreasing = T)[1])
predicted_expr_list$`1142243F`[, s1]
observed_st_expr_list <- list()
predicted_expr_list <- list()
observed_st_expr_list <- list()
for (i in 1:nrow(st_meta)) {
# Retrieve the reference average expression matrix for the specific cell subtype
avg_type_ref <- avg_sc_ref[[st_meta[i, "subtype"]]]
# Get the sample ID for the current iteration
s1 <- st_meta[i, "sid"]
# Read the cell type proportion data for the current sample
prop <- read.csv(file.path(output_dir, sprintf("/Proportion_%s_celltype_major.csv", s1)),
check.names = F)
# Set the first column as rownames and clean up the proportion data
colnames(prop)[1] <- "X"
prop <- prop %>%
column_to_rownames("X") %>%
dplyr::select(-sid) %>%
t()
# Calculate predicted gene expression using matrix multiplication
predicted_expr <- avg_type_ref %*% prop
# Store the predicted expression in a list
predicted_expr_list[[s1]] <- predicted_expr
# Read the spatial transcriptomics count matrix for the sample
stdata_s <- readMM(st_meta[i, "count_matrix_dir"])
# Handle missing column or row names for the count matrix
if(is.null(colnames(stdata_s)) || is.null(rownames(stdata_s))){
barcode <- read.table(file = gzfile(st_meta[i, "barcode_dir"]),
sep = '\t', header = FALSE)
feature <- read.table(file = gzfile(st_meta[i, "feature_dir"]),
sep = '\t', header = FALSE)
barcode_names <- barcode$V1
# feature_names <- feature$V1
feature_names <- feature[, sapply(feature, function(column) !("Gene Expression" %in% column) && !any(grepl("^ENSG", column)))]
# Assign to the dimension with same length.
if (ncol(stdata_s) == length(barcode_names) && nrow(stdata_s) == length(feature_names)) {
colnames(stdata_s) <- barcode_names
rownames(stdata_s) <- feature_names
} else if (nrow(stdata_s) == length(barcode_names) && ncol(stdata_s) == length(feature_names)) {
rownames(stdata_s) <- barcode_names
colnames(stdata_s) <- feature_names
} else {
cat("The lengths of the barcode or feature names do not match the dimensions of the matrix.\n")
}
}
# Convert the matrix to a sparse format for efficient computation
stdata_s <- as(stdata_s, "sparseMatrix")
stdata_s <- as(stdata_s, "CsparseMatrix")
# Extract the count matrix for columns (samples) matching the predicted expression matrix
st_count <- stdata_s[, colnames(predicted_expr)]
observed_st_expr_list[[s1]] <- st_count
# # Find common genes between the predicted and observed matrices
# common_genes <- intersect(rownames(st_count), rownames(predicted_expr))
# st_count <- st_count[common_genes,]
# predicted_expr <- predicted_expr[common_genes, ]
#
# # Compute sample-wise correlations directly
# column_wise_correlation <- sapply(seq_len(ncol(st_count)), function(i) {
#   cor(st_count[, i], predicted_expr[, i], method = "pearson")
# })
# names(column_wise_correlation) <- colnames(st_count)
# sample_wise_cor[[s1]] <- column_wise_correlation
#
# # Compute gene-wise correlations directly
# row_wise_correlation <- sapply(seq_len(nrow(st_count)), function(i) {
#   cor(st_count[i, ], predicted_expr[i, ], method = "pearson")
# })
# names(row_wise_correlation) <- rownames(st_count)
# gene_wise_cor[[s1]] <- row_wise_correlation
}
save(predicted_expr_list, observed_st_expr_list, gene_wise_cor, sample_wise_cor, avg_sc_ref, file = "card_predict_expression.rda")
spot <- names(sort(sample_wise_cor$`1142243F`, decreasing = T)[1])
spot
cbind( predicted_expr_list$`1142243F`[, spot],
observed_st_expr_list$`1142243F`[, spot])
spot_df <- cbind( predicted_expr_list$`1142243F`[, spot],
observed_st_expr_list$`1142243F`[, spot])
View(spot_df)
colnames(spot_df) <- c("Predicted", "Observed")
ggplot(spot_df, aes(x = Observed, y = Predicted)) +
geom_point()
spot_df$Predicted <- round(spot_df$Predicted)
spot_df <- data.frame(cbind( predicted_expr_list$`1142243F`[, spot],
observed_st_expr_list$`1142243F`[, spot]))
View(spot_df)
colnames(spot_df) <- c("Predicted", "Observed")
spot_df$Predicted <- round(spot_df$Predicted)
ggplot(spot_df, aes(x = Observed, y = Predicted)) +
geom_point()
ggplot(spot_df, aes(x = Observed, y = Predicted)) +
geom_boxplot()
ggplot(spot_df, aes(x = Observed, y = Predicted)) +
geom_point(alpha = 0.5)
