}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
proposal_sigma <- c(0.5, 0.5)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
plot(NULL, type = "n", xlim = c(1, n_samples), ylim = range(sapply(chains, function(chain) chain[, 2])),
xlab = "Iteration", ylab = expression(theta[2]), main = expression(paste("Traceplot of ", theta[2])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 2], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
seq(0.2, 2, 0.1)
sigmas <- proposal_sigma * seq(0.2, 2, 0.1)
sigmas
proposal_sigma
sigmas <- 0.5 * seq(0.2, 2, 0.1)
sigmas
sigmas <- 0.5 * seq(0.2, 3, 0.1)
initial_values <- list(c(0, 0), c(2, 2), c(-2, 2), c(-2, -2), c(2, -2))
proposal_sigma <- c(0.5, 0.5)
seq(0.2, 2, 0.1)
sigmas <- 0.5 * seq(0.2, 3, 0.1)
for (sigma in sigmas) {
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma = c(sigma, sigma))
})
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
}
sigmas
for (sigma in sigmas) {
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma = c(sigma, sigma))
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
print(accept_rates)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
}
for (sigma in sigmas) {
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma = c(sigma, sigma))
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
print(gelman.diag(combined_mcmc)$psrf)
# Effective sample size
print(effectiveSize(combined_mcmc))
}
for (sigma in sigmas) {
print(sigma)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma = c(sigma, sigma))
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
print(gelman.diag(combined_mcmc)$psrf)
# Effective sample size
print(effectiveSize(combined_mcmc))
}
proposal_sigma <- c(1.2, 1.2)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
proposal_sigma <- c(1.5, 1.5)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
plot(NULL, type = "n", xlim = c(1, n_samples), ylim = range(sapply(chains, function(chain) chain[, 2])),
xlab = "Iteration", ylab = expression(theta[2]), main = expression(paste("Traceplot of ", theta[2])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 2], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
proposal_sigma <- c(1.6, 1.6)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
plot(NULL, type = "n", xlim = c(1, n_samples), ylim = range(sapply(chains, function(chain) chain[, 2])),
xlab = "Iteration", ylab = expression(theta[2]), main = expression(paste("Traceplot of ", theta[2])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 2], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
accept_rates
par(mfrow = c(1,1))
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
proposal_sigma <- c(1.5, 1.5)
# Run the MCMC chains
chains <- lapply(initial_values, function(init) {
metropolis_sampler(init, n_samples, proposal_sigma)
})
accept_rates <- lapply(chains, function(x) x$accept)
chains <- lapply(chains, function(x) x$theta_chain)
colors <- rainbow(length(chains))
plot(NULL, type = "n", xlim = c(1, n_samples),
ylim = range(sapply(chains, function(chain) chain[, 1])),
xlab = "Iteration", ylab = expression(theta[1]),
main = expression(paste("Traceplot of ", theta[1])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 1], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
plot(NULL, type = "n", xlim = c(1, n_samples), ylim = range(sapply(chains, function(chain) chain[, 2])),
xlab = "Iteration", ylab = expression(theta[2]), main = expression(paste("Traceplot of ", theta[2])))
for (i in 1:length(chains)) {
lines(chains[[i]][, 2], col = colors[i])
}
legend("topright", legend = paste("Chain", 1:length(chains)), col = colors, lty = 1, cex = 0.8)
library(coda)
# Combine the chains into an MCMC list
mcmc_chains <- lapply(chains, as.mcmc)
combined_mcmc <- mcmc.list(mcmc_chains)
# Gelman-Rubin diagnostic
gelman.diag(combined_mcmc)$psrf
# Effective sample size
effectiveSize(combined_mcmc)
accept_rates
load("/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/deconvolution_new/CARD_alg_matrix_BC23268_C2_celltype_major.rds")
> load("/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/deconvolution_new/CARD_alg_matrix_BC23268_D1_celltype_major.rds")
load("/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/deconvolution_new/CARD_alg_matrix_BC23268_D1_celltype_major.rds")
setwd("")
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/Visium")
read.csv("create_patches_input.csv")
input <- read.csv("create_patches_input.csv")
View(input)
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium")
fns
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord")
fns
ids <- gsub("_coord.csv", "", fns)
ids
ids %in% input$sample_id
ids[!ids %in% input$sample_id]
info <- input[input$sample_id %in% ids, ]
length(ids)
View(info)
fns
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/",fns)
fns[!ids %in% input$sample_id]
fns <- fns[ids %in% input$sample_id]
fns
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", fns)
View(info)
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", input$sample_id, "_coord.csv")
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/Visium")
input <- read.csv("create_patches_input.csv")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord")
ids <- gsub("_coord.csv", "", fns)
info <- input[input$sample_id %in% ids, ]
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", info$sample_id, "_coord.csv")
file.exists(info$spatial_path)
!file.exists(info$spatial_path)
all(file.exists(info$spatial_path))
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
ids = id[1]
id = ids[1]
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
View(sp)
info[info$sample_id == id, "diameter"] <- sp$r * 2
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
ids <- gsub("_coord.csv", "", fns)
info <- input[input$sample_id %in% ids, ]
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", info$sample_id, "_coord.csv")
all(file.exists(info$spatial_path))
for (id in ids) {
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
id
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/Visium")
input <- read.csv("create_patches_input.csv")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord")
ids <- gsub("_coord.csv", "", fns)
info <- input[input$sample_id %in% ids, ]
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", info$sample_id, "_coord.csv")
all(file.exists(info$spatial_path))
for (id in info$sample_id ) {
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
info$image_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/image/", info$sample_id, ".phg")
info$image_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/image/", info$sample_id, ".png")
all(file.exists(info$image_path))
info$pxl_x_col <- "xaxis"
info$pxl_y_col <- "yaxis"
info$output_dir <- "../../output/STImage-1K4M/Visium/patch/"
write.csv(info, "create_patches_input.csv")
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/Visium")
input <- read.csv("create_patches_input.csv")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord")
ids <- gsub("_coord.csv", "", fns)
info <- input[input$sample_id %in% ids, ]
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", info$sample_id, "_coord.csv")
all(file.exists(info$spatial_path))
info$image_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/image/", info$sample_id, ".png")
all(file.exists(info$image_path))
for (id in info$sample_id ) {
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
info$pxl_x_col <- 3
info$pxl_y_col <- 2
info$barcode_col <- 1
info$output_dir <- "../../output/STImage-1K4M/Visium/patch/"
input <- read.csv("create_patches_input.csv")[,-1]
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord")
ids <- gsub("_coord.csv", "", fns)
info <- input[input$sample_id %in% ids, ]
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", info$sample_id, "_coord.csv")
all(file.exists(info$spatial_path))
info$image_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/image/", info$sample_id, ".png")
all(file.exists(info$image_path))
for (id in info$sample_id ) {
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
info$pxl_x_col <- 3
info$pxl_y_col <- 2
info$barcode_col <- 1
info$output_dir <- "../../output/STImage-1K4M/Visium/patch/"
?write.csv
write.csv(info, "create_patches_input.csv", row.names = F)
###############
###############
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/ST")
input <- read.csv("create_patches_input.csv")[,-1]
###############
###############
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/ST")
input <- read.csv("create_patches_input.csv")[,-1]
View(input)
input <- read.csv("create_patches_input.csv")
View(input)
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/ST/coord")
###############
###############
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/ST")
input <- read.csv("create_patches_input.csv")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/ST/coord")
fns
ids <- gsub("_coord.csv", "", fns)
ids
input$sample_id <- ids
input <- input[0,]
input$sample_id <- ids
ids
input$sample_id <- ids
input <- data.frame()
input$sample_id <- ids
ids
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/ST/coord")
ids <- gsub("_coord.csv", "", fns)
input <- data.frame(sample_id = ids)
View(input)
###############
###############
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/ST")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/ST/coord")
ids <- gsub("_coord.csv", "", fns)
info <- data.frame(sample_id = ids)
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/ST/coord/", info$sample_id, "_coord.csv")
all(file.exists(info$spatial_path))
info$image_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/ST/image/", info$sample_id, ".png")
all(file.exists(info$image_path))
file.exists(info$image_path)
for (id in info$sample_id ) {
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
info$pxl_x_col <- 3
info$pxl_y_col <- 2
info$barcode_col <- 1
info$output_dir <- "../../output/STImage-1K4M/ST/patch/"
write.csv(info, "create_patches_input.csv", row.names = F)
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/Visium")
input <- read.csv("create_patches_input.csv")[,-1]
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/Visium")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord")
ids <- gsub("_coord.csv", "", fns)
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/Visium")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord")
ids <- gsub("_coord.csv", "", fns)
info <- data.frame(sample_id = ids)
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/coord/", info$sample_id, "_coord.csv")
all(file.exists(info$spatial_path))
info$image_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/Visium/image/", info$sample_id, ".png")
all(file.exists(info$image_path))
for (id in info$sample_id ) {
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
info$pxl_x_col <- 3
info$pxl_y_col <- 2
info$barcode_col <- 1
info$output_dir <- "../../output/STImage-1K4M/Visium/patch/"
write.csv(info, "create_patches_input.csv", row.names = F)
###############
###############
setwd("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/ST")
fns <- list.files("/Users/zhiningsui/GitHub/STImage-1K4M/ST/coord")
ids <- gsub("_coord.csv", "", fns)
info <- data.frame(sample_id = ids)
info$spatial_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/ST/coord/", info$sample_id, "_coord.csv")
all(file.exists(info$spatial_path))
info$image_path <- paste0("/Users/zhiningsui/GitHub/STImage-1K4M/ST/image/", info$sample_id, ".png")
all(file.exists(info$image_path))
file.exists(info$image_path)
for (id in info$sample_id ) {
sp <- read.csv(info[info$sample_id == id, "spatial_path"])
info[info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
info$pxl_x_col <- 3
info$pxl_y_col <- 2
info$barcode_col <- 1
info$output_dir <- "../../output/STImage-1K4M/ST/patch/"
write.csv(info, "create_patches_input.csv", row.names = F)
st_dirs <- "/Users/zhiningsui/GitHub/STimage-1K4M/ST/gene_exp"
st_dirs <- "/Users/zhiningsui/GitHub/STimage-1K4M/ST/gene_exp"
output_dirs <- "../../output/STimage-1K4M/deconvolution/ST"
sc_dir <- "/Users/zhiningsui/Library/CloudStorage/Dropbox/st2image_data/Wu_2021/data/scRNASeq/"
st_dir <- "/Users/zhiningsui/GitHub/STimage-1K4M/ST/gene_exp"
output_dir <- "../../output/STimage-1K4M/deconvolution/ST"
metadata <- read.csv("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/meta/meta_all_gene.csv")
metadata
View(metadata)
metadata_all <- read.csv("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/meta/meta_all_gene.csv")
# Create metadata for the ST data
metadata <- metadata_all[metadata_all$tech == "ST", ]
View(metadata)
metadata_all$sid <- metadata_all$slide
metadata_all <- read.csv("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/meta/meta_all_gene.csv")
metadata_all$sid <- metadata_all$slide
metadata_all <- read.csv("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/meta/meta_all_gene.csv")
metadata_all$sid <- metadata_all$slide
st_meta <- metadata_all
View(st_meta)
st_meta <- metadata_all[, -c("pmid")]
st_meta <- metadata_all[, !colnames(metadata_all) %in% ("pmid", "abstract", "title", "keywords")]
st_meta <- metadata_all[, !colnames(metadata_all) %in% c("pmid", "abstract", "title", "keywords")]
st_meta <- metadata_all[, !colnames(metadata_all) %in% c("pmid", "abstract", "title", "keywords", "spot_num", "gene_num")]
metadata_all <- read.csv("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/meta/meta_all_gene.csv")
metadata_all$sid <- metadata_all$slide
st_meta <- metadata_all[, !colnames(metadata_all) %in% c("pmid", "abstract", "title", "keywords", "spot_num", "gene_num")]
colnames(st_meta)
metadata_all <- read.csv("/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/meta/meta_all_gene.csv")
metadata_all$sid <- metadata_all$slide
st_meta <- metadata_all[, c("sid", "tech", "species", "tissue", "involve_cancer")]
st_dir <- "/Users/zhiningsui/GitHub/STimage-1K4M"
st_dir <- "/Users/zhiningsui/GitHub/STimage-1K4M/"
st_meta$count_matrix_dir <- paste0(st_dir, st_meta$tech, "/gene_exp/", st_meta$sid, "_count.cvs")
st_meta$count_matrix_dir <- paste0(st_dir, st_meta$tech, "/gene_exp/", st_meta$sid, "_count.csv")
st_meta <- as.data.frame(st_meta)
write.csv(st_meta, "../../data/STimage-1K4M/metadata.csv", row.names = F)
write.csv(st_meta, "/Users/zhiningsui/GitHub/STpath/data/STImage-1K4M/metadata.csv", row.names = F)
file.exists
file.exists(st_meta$count_matrix_dir)
st_meta$count_matrix_dir[170]
tmp <- read.csv(st_meta$count_matrix_dir[170])
View(tmp)
st_dir <- "/Users/zhiningsui/GitHub/STimage-1K4M/"
metadata_all <- read.csv(file.path(st_dir, "meta/meta_all_gene.csv"))
metadata_all
unique(metadata_all$tech)
subdirs <- file.path(st_dir, unique(metadata_all$tech))
subdirs
st_dir <- "/Users/zhiningsui/GitHub/STimage-1K4M"
metadata_all <- read.csv(file.path(st_dir, "meta/meta_all_gene.csv"))
subdirs <- file.path(st_dir, unique(metadata_all$tech))
subdirs
sp_info <- metadata_all$slide
sp_info <- metadata_all[, c("slide", "tech")]
sp_info
View(sp_info)
subdirs <-
sp_info <- data.frame(sample_id = metadata_all$slide,
dir = file.path(st_dir, metadata_all$tech))
sp_info$spatial_path <- paste0(file.path(sp_info$dir, "/coord", info$sample_id, "_coord.csv"))
sp_info$spatial_path <- paste0(file.path(sp_info$dir, "coord", info$sample_id, "_coord.csv"))
sp_info$spatial_path <- paste0(file.path(sp_info$dir, "coord", paste0(info$sample_id, "_coord.csv")))
sp_info$spatial_path <- file.path(sp_info$dir, "coord", paste0(info$sample_id, "_coord.csv"))
sp_info$image_path <- file.path(sp_info$dir, "image", paste0(info$sample_id, ".png"))
sp_info$dir
sp_info$output_dir <- file.path(sp_info$dir, "patch")
write.csv(sp_info, file.path(st_dir, "create_patches_input.csv"), row.names = F)
st_dir
write.csv(sp_info,
"/Users/zhiningsui/GitHub/STpath/data/STimage-1K4M/create_patches_input.csv",
row.names = F)
st_dir <- "/Users/zhiningsui/GitHub/STimage-1K4M"
metadata_all <- read.csv(file.path(st_dir, "meta/meta_all_gene.csv"))
sp_info <- data.frame(sample_id = metadata_all$slide,
dir = file.path(st_dir, metadata_all$tech))
sp_info$spatial_path <- file.path(sp_info$dir, "coord", paste0(info$sample_id, "_coord.csv"))
all(file.exists(sp_info$spatial_path))
sp_info$image_path <- file.path(sp_info$dir, "image", paste0(info$sample_id, ".png"))
all(file.exists(sp_info$image_path))
sp_info$pxl_x_col <- 3
sp_info$pxl_y_col <- 2
sp_info$barcode_col <- 1
for (id in sp_info$sample_id ) {
sp <- read.csv(sp_info[sp_info$sample_id == id, "spatial_path"])
sp_info[sp_info$sample_id == id, "diameter"] <- unique(sp$r) * 2
}
